##working model of linear sepration

import numpy as np
import tensorflow as tf

x_data = np.linspace(0,10,10) + np.random.uniform(-1.5,1.5,10)
y_data = np.linspace(0,10,10) + np.random.uniform(-1.5,1.5,10)

import matplotlib.pyplot as plt


plt.plot(x_data,y_data,'*')

#y =  mx + c

np.random.rand(2)

m =  tf.Variable(0.28)
b = tf.Variable(0.74)

error = 0 

for x,y in zip(x_data,y_data):
    
    y_hat = m*x + b
    
    error += (y-y_hat)**2
    
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)
train = optimizer.minimize(error)

init = tf.global_variables_initializer()

plt.plot(x_data,y_data,'*')
x_test = np.linspace(-1,11,10)

with tf.Session() as sess:
    
    sess.run(init)
    training_steps = 5
    for i in range(training_steps):
        
        sess.run(train)
        
        final_slope , final_intercept = sess.run([m,b])
    
        y_pred = final_slope*x_test+final_intercept    
        plt.plot(x_test,y_pred,'r')





print(final_slope)
print(final_intercept)
